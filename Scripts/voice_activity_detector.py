# -*- coding: utf-8 -*-
"""Voice activity detector.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_E7Z_67B-w5OIlqQQ-vvNSTSHCeCh7w0
"""

!pip install webrtcvad

import librosa
import pandas as pd
import numpy as np
import librosa.display
import matplotlib.pyplot as plt
from scipy.signal import get_window
import librosa.display
import os
import webrtcvad

#window and extract to csv, modify duration to 10ms as webrtcvad doesnot work on duration of 500ms
path = "/content/signal"
col_frames = os.listdir(path)
Y = []
Win_len = []
for frame in col_frames:
  y, sr = librosa.load(path + "/" + str(frame), sr = 16000)
  #y_shape = y.shape[0]
  #duration = y_shape/sr
  win_len = (int)(sr*0.01)
  Y.append(y)
  Win_len.append(win_len)

def window_frame(y, n_fft=400, hop_length=400, win_length=400, window='hann'):
  # Set default length
  if win_length is None:
      win_length = n_fft
  # Set the default hop, if it's not already specified
  if hop_length is None:
      hop_length = win_length
  fft_window = librosa.filters.get_window(window, win_length, fftbins=True)
  # Pad the window out to n_fft size
  fft_window = librosa.util.pad_center(fft_window, n_fft)
  # Reshape so that the window can be broadcast
  fft_window = fft_window.reshape((-1, 1))
  # Pad the time series so that frames are centered
  y = np.pad(y, int(n_fft // 2), mode='reflect')
  # Window the time series.
  y_frames = librosa.util.frame(y, frame_length=n_fft, hop_length=hop_length)
  windowed_frames = (y_frames * fft_window).T
  return windowed_frames

Frame = []
for y, win_len in zip(Y, Win_len):
  temp_frames = window_frame(y, win_len, win_len, win_len, 'hann')
  Frame.extend(temp_frames)

np.savetxt("hann_frame.csv", Frame, delimiter=",")

#Label the frame

vad = webrtcvad.Vad()
Label = []
for frame in Frame:
    fr = np.int16(frame * 32768).tobytes() #change float to bytes
    is_Speech = vad.is_speech(fr, 16000)
    if (is_Speech):
      #print('1')
      Label.append(1)
    else:
      #print('0')
      Label.append(0)
np.savetxt("label_frame.csv", Label, delimiter=",")
```